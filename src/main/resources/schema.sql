CREATE TABLE IF NOT EXISTS users
(
    user_id  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    varchar NOT NULL,
    login    varchar NOT NULL,
    name     varchar,
    birthday date
);


CREATE TABLE IF NOT EXISTS friendships
(
    requester_user_id bigint NOT NULL,
    addressee_user_id bigint NOT NULL,
    PRIMARY KEY (requester_user_id, addressee_user_id),
    FOREIGN KEY (requester_user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (addressee_user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT chk_no_self_friendship CHECK (requester_user_id <> addressee_user_id)
);

CREATE TABLE IF NOT EXISTS ratings
(
    rating_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name      varchar UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS films
(
    film_id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         varchar NOT NULL,
    description  varchar(200),
    release_date date,
    duration     integer,
    rating_id    bigint,
    FOREIGN KEY (rating_id) REFERENCES ratings (rating_id)
);

CREATE TABLE IF NOT EXISTS directors
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(255) NOT NULL

);

CREATE TABLE IF NOT EXISTS films_directors
(
    film_id  bigint NOT NULL,
    director_id bigint NOT NULL,
    PRIMARY KEY (film_id, director_id),
    FOREIGN KEY (director_id ) REFERENCES directors (id),
    FOREIGN KEY (film_id) REFERENCES films (film_id)
);

CREATE TABLE IF NOT EXISTS film_likes
(
    user_id bigint NOT NULL,
    film_id bigint NOT NULL,
    PRIMARY KEY (user_id, film_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     varchar UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS film_genres
(
    film_id  bigint NOT NULL,
    genre_id bigint NOT NULL,
    PRIMARY KEY (film_id, genre_id),
    FOREIGN KEY (genre_id) REFERENCES genres (genre_id),
    FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS feed_events
(
    event_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    timestamp  timestamp with time zone NOT NULL,
    user_id    bigint                   NOT NULL,
    event_type varchar(10)              NOT NULL,
    operation  varchar(10)              NOT NULL,
    entity_id  bigint                   NOT NULL,

    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    CHECK (event_type IN ('LIKE', 'REVIEW', 'FRIEND')),
    CHECK (operation IN ('ADD', 'REMOVE', 'UPDATE'))
);

CREATE INDEX IF NOT EXISTS idx_feed_user_id ON feed_events (user_id);
-- Таблица для хранения самих отзывов
CREATE TABLE IF NOT EXISTS reviews (
                                       review_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                       content     VARCHAR(500)        NOT NULL,    -- текст отзыва (до 500)
    is_positive BOOLEAN            NOT NULL,    -- позитивный/негативный
    user_id     BIGINT             NOT NULL,
    film_id     BIGINT             NOT NULL,
    useful      INT                NOT NULL DEFAULT 0,  -- рейтинг полезности
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE
    );

-- Таблица для учёта лайков/дизлайков к отзывам
CREATE TABLE IF NOT EXISTS review_likes (
                                            review_id BIGINT   NOT NULL,
                                            user_id   BIGINT   NOT NULL,
                                            is_like   BOOLEAN  NOT NULL,     -- true=лайк, false=дизлайк
                                            PRIMARY KEY (review_id, user_id, is_like),
    FOREIGN KEY (review_id) REFERENCES reviews (review_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id)   REFERENCES users   (user_id) ON DELETE CASCADE
    );